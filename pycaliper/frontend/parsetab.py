
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'caliper_declarationsAmp Bar BracketL BracketR Carat Colon Comma Divide Dot Equals GreaterThan Ident KW_begin KW_def KW_end KW_endmodule KW_endspec KW_endstruct KW_foreach KW_if KW_input KW_invariant KW_logic KW_module KW_output KW_parameter KW_spec KW_state KW_struct KW_submodule KW_this LessThan LineComment Minus Mod Not Num ParenL ParenR Plus Question Semi Star Tildeempty :expr_list_p   : expressionexpr_list_p   : expression Comma expr_list_pexpr_list   : emptyexpr_list   : expr_list_pprimary1_list_p   : primary1primary1_list_p   : primary1 Comma primary1_list_pcaliper_statement_list_p   : caliper_statementcaliper_statement_list_p   : caliper_statement caliper_statement_list_pcaliper_statement_list   : emptycaliper_statement_list   : caliper_statement_list_pcaliper_mod_stmt_list : caliper_mod_stmtcaliper_mod_stmt_list : caliper_mod_stmt caliper_mod_stmt_listPlusColon : Plus ColonMinusColon : Minus ColonPower : Star StarEquality : Equals EqualsInequality : Not EqualsCaseEquality : Equals Equals EqualsCaseInequality : Not Equals EqualsWildcardEquality : Equals Equals QuestionWildcardInequality : Not Equals QuestionLessThanEqual : LessThan EqualsGreaterThanEqual : GreaterThan EqualsLogicalAnd : Amp AmpLogicalOr : Bar Bar\n    BinaryXnor  : Tilde Carat\n                | Carat Tilde\n    \n    BinaryNand  : Tilde Amp\n                | Amp Tilde\n    \n    BinaryNor   : Tilde Bar\n                | Bar Tilde\n    LogicalImplication : Minus GreaterThanLogicalEquivalence : LessThan Minus GreaterThanLogicalShiftLeft : LessThan LessThanLogicalShiftRight : GreaterThan GreaterThanArithmeticShiftLeft : LessThan LessThan LessThanArithmeticShiftRight : GreaterThan GreaterThan GreaterThanexpression : expression1\n    expression1 : expression2\n    \n    expression1 : expression2 LogicalImplication expression1\n                | expression2 LogicalEquivalence expression1\n    \n    expression2 : expression3\n    \n    expression2 : expression3 Question expression Colon expression2\n    \n    expression3 : expression4\n    \n    expression3 : expression3 LogicalOr expression4\n                | expression3 LogicalAnd expression4\n                | expression3 Bar expression4\n                | expression3 Carat expression4\n                | expression3 BinaryXnor expression4\n                | expression3 Amp expression4\n                | expression3 Equality expression4\n                | expression3 Inequality expression4\n                | expression3 CaseEquality expression4\n                | expression3 CaseInequality expression4\n                | expression3 WildcardEquality expression4\n                | expression3 WildcardInequality expression4\n    \n    expression4 : expression5\n    \n    expression4 : expression4 LessThan expression5\n                | expression4 LessThanEqual expression5\n                | expression4 GreaterThan expression5\n                | expression4 GreaterThanEqual expression5\n    \n    expression5 : expression6\n    \n    expression5 : expression5 LogicalShiftRight expression6\n                | expression5 LogicalShiftLeft expression6\n                | expression5 ArithmeticShiftRight expression6\n                | expression5 ArithmeticShiftLeft expression6\n    \n    expression6 : expression7\n    \n    expression6 : expression6 Plus expression7\n                | expression6 Minus expression7\n    \n    expression7 : expression8\n    \n    expression7 : expression7 Star expression8\n                | expression7 Divide expression8\n                | expression7 Mod expression8\n                | expression7 Power expression8\n    \n    expression8 : primary\n    \n    expression8 : Plus primary\n                | Minus primary\n                | Amp primary\n                | BinaryNand primary\n                | Bar primary\n                | BinaryNor primary\n                | Carat primary\n                | BinaryXnor primary\n                | Not primary\n                | Tilde primary\n    \n    part_select_range   : expression Colon expression\n                        | expression PlusColon expression\n                        | expression MinusColon expression\n    \n    number : Num\n    \n    identifier : Ident\n    \n    primary1 : identifier\n    \n    primary1 : KW_this\n    \n    primary1 : primary1 Dot identifier\n    \n    primary1 : primary1 BracketL expression BracketR\n    \n    primary1 : primary1 BracketL part_select_range BracketR\n    \n    function_call : identifier ParenL expr_list ParenR\n    \n    primary : number\n            | primary1\n            | function_call\n            | ParenL expression ParenR\n    \n    basetype : KW_logic\n    \n    basetype : identifier ParenL expr_list ParenR\n    \n    basetype : identifier\n    \n    dimension : BracketL expression BracketR\n    \n    dimension : BracketL expression Colon expression BracketR\n    datatype : basetypedatatype : datatype dimensioncaliper_loop : identifier LessThan expressioncaliper_loop_list_p : caliper_loopcaliper_loop_list_p : caliper_loop_list_p Comma caliper_loop\n    caliper_statement : KW_def expr_list_p Semi\n    \n    caliper_statement : KW_invariant identifier Colon expression Semi\n    \n    caliper_statement : datatype primary1_list_p Semi\n    \n    caliper_statement : KW_begin caliper_statement_list KW_end\n    \n    caliper_statement : KW_if ParenL expression ParenR caliper_statement\n    \n    caliper_statement : KW_foreach ParenL caliper_loop_list_p ParenR caliper_statement\n    \n    caliper_mod_stmt : KW_input caliper_statement\n    \n    caliper_mod_stmt : KW_output caliper_statement\n    \n    caliper_mod_stmt : KW_state caliper_statement\n    \n    caliper_mod_stmt : KW_output KW_state caliper_statement\n    \n    caliper_mod_stmt : KW_begin caliper_mod_stmt_list KW_end\n    \n    caliper_mod_stmt : KW_if ParenL expression ParenR caliper_mod_stmt\n    \n    caliper_mod_stmt : KW_def expr_list_p Semi\n    \n    caliper_mod_stmt : KW_invariant identifier Colon expression Semi\n    \n    caliper_mod_stmt : datatype primary1_list_p Semi\n    \n    caliper_mod_stmt : KW_submodule identifier ParenL expr_list ParenR identifier Semi\n    \n    caliper_declaration : KW_spec identifier ParenL expr_list ParenR Semi caliper_statement_list KW_endspec\n    \n    caliper_declaration : KW_struct identifier ParenL expr_list ParenR Semi caliper_statement_list KW_endstruct\n    \n    caliper_declaration : KW_module identifier ParenL expr_list ParenR Semi caliper_mod_stmt_list KW_endmodule\n    \n    caliper_declaration : KW_parameter identifier Semi\n    \n    caliper_declarations : empty\n    \n    caliper_declarations : caliper_declaration caliper_declarations\n    '
    
_lr_action_items = {'$end':([0,1,2,3,8,17,202,220,221,],[-1,0,-132,-1,-133,-131,-128,-129,-130,]),'KW_spec':([0,3,17,202,220,221,],[4,4,-131,-128,-129,-130,]),'KW_struct':([0,3,17,202,220,221,],[5,5,-131,-128,-129,-130,]),'KW_module':([0,3,17,202,220,221,],[6,6,-131,-128,-129,-130,]),'KW_parameter':([0,3,17,202,220,221,],[7,7,-131,-128,-129,-130,]),'Ident':([4,5,6,7,10,14,15,16,19,28,29,30,31,35,36,39,40,41,42,50,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,76,77,79,81,84,85,86,87,88,91,92,93,94,95,96,103,104,105,106,107,112,116,121,124,126,134,135,137,140,146,147,150,158,159,161,165,166,167,168,169,172,173,174,175,176,177,178,179,180,181,183,184,185,191,192,193,194,195,197,198,199,200,201,207,209,212,213,218,219,223,224,225,226,228,234,235,236,237,239,244,245,247,248,249,250,251,254,255,256,257,258,259,260,263,265,266,269,270,271,272,274,],[10,10,10,10,-91,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,-32,-28,-30,10,10,10,10,10,10,10,10,10,10,-29,-31,-27,10,10,10,-33,10,10,10,-17,-18,-23,-24,-36,-35,-16,10,10,-104,10,10,10,10,10,-107,-102,-34,10,-19,-21,-20,-22,-38,-37,10,10,10,10,10,10,10,10,10,10,10,10,10,-108,10,10,10,-14,-15,-118,-119,10,-120,10,-112,10,-114,10,-115,-121,-122,-124,10,-126,10,-103,-105,10,10,10,10,10,10,-113,-116,-117,-123,-125,10,-106,-127,]),'ParenL':([9,10,11,12,14,15,16,18,19,28,29,30,31,35,36,39,40,41,42,50,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,76,77,79,81,84,85,86,87,88,91,92,93,94,95,96,103,104,105,107,116,121,124,126,134,135,137,140,146,147,150,161,166,170,171,174,175,176,177,178,179,180,181,183,184,185,196,197,201,209,212,218,219,228,232,235,248,250,255,259,],[14,-91,15,16,19,19,19,50,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-32,-28,-30,19,19,19,19,19,19,19,19,19,19,-29,-31,-27,19,-33,19,19,19,-17,-18,-23,-24,-36,-35,-16,201,19,212,213,-34,19,-19,-21,-20,-22,-38,-37,19,19,19,228,19,19,19,19,-14,-15,19,250,19,19,19,19,19,]),'Semi':([10,13,18,23,24,25,26,27,32,33,34,37,38,43,44,45,46,47,52,78,80,82,83,97,98,99,100,101,102,108,109,111,113,114,115,119,120,122,123,125,127,128,129,130,131,132,133,136,138,139,141,142,143,144,145,148,149,151,152,153,154,155,160,182,188,204,206,208,210,214,229,231,252,253,261,273,],[-91,17,-92,-2,-39,-40,-43,-45,-58,-63,-68,-71,-76,-98,-99,-100,-90,-93,112,-81,-83,-84,-79,-77,-78,-80,-82,-85,-86,158,159,-101,-3,-41,-42,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-59,-60,-61,-62,-64,-65,-66,-67,-69,-70,-72,-73,-74,-75,-94,-97,-95,-96,234,236,-6,-92,-44,247,249,263,-7,270,274,]),'Dot':([10,18,44,47,155,182,188,208,210,],[-91,-92,106,-93,-94,-95,-96,106,-92,]),'BracketL':([10,18,44,47,155,161,168,172,173,182,188,199,207,208,210,251,254,272,],[-91,-92,107,-93,-94,-104,209,-107,-102,-95,-96,209,-108,107,-92,-103,-105,-106,]),'Star':([10,18,34,37,38,43,44,45,46,47,78,80,82,83,93,97,98,99,100,101,102,111,148,149,151,152,153,154,155,160,182,188,],[-91,-92,93,-71,-76,-98,-99,-100,-90,-93,-81,-83,-84,-79,150,-77,-78,-80,-82,-85,-86,-101,93,93,-72,-73,-74,-75,-94,-97,-95,-96,]),'Divide':([10,18,34,37,38,43,44,45,46,47,78,80,82,83,97,98,99,100,101,102,111,148,149,151,152,153,154,155,160,182,188,],[-91,-92,94,-71,-76,-98,-99,-100,-90,-93,-81,-83,-84,-79,-77,-78,-80,-82,-85,-86,-101,94,94,-72,-73,-74,-75,-94,-97,-95,-96,]),'Mod':([10,18,34,37,38,43,44,45,46,47,78,80,82,83,97,98,99,100,101,102,111,148,149,151,152,153,154,155,160,182,188,],[-91,-92,95,-71,-76,-98,-99,-100,-90,-93,-81,-83,-84,-79,-77,-78,-80,-82,-85,-86,-101,95,95,-72,-73,-74,-75,-94,-97,-95,-96,]),'Plus':([10,14,15,16,18,19,24,25,26,27,32,33,34,37,38,43,44,45,46,47,50,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,76,77,78,80,82,83,85,86,87,88,91,92,93,94,95,96,97,98,99,100,101,102,105,107,111,114,115,116,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,160,166,174,175,176,177,178,179,180,181,182,183,184,185,188,197,201,209,212,214,218,219,228,235,248,250,255,259,],[-91,35,35,35,-92,35,-39,-40,-43,-45,-58,91,-68,-71,-76,-98,-99,-100,-90,-93,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-81,-83,-84,-79,35,35,35,35,35,35,35,35,35,35,-77,-78,-80,-82,-85,-86,-27,35,-101,-41,-42,-33,-46,-47,-26,-48,-49,-28,-50,-25,-51,-52,-53,-54,-55,-56,-57,-17,-18,-59,-23,-60,-61,-24,-62,91,91,91,91,-36,-35,-69,-70,-16,-72,-73,-74,-75,-94,186,-97,35,-34,35,-19,-21,-20,-22,-38,-37,-95,35,35,35,-96,35,35,35,35,-44,-14,-15,35,35,35,35,35,35,]),'Minus':([10,14,15,16,18,19,24,25,26,27,32,33,34,37,38,43,44,45,46,47,50,53,54,55,57,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,76,77,78,80,82,83,85,86,87,88,91,92,93,94,95,96,97,98,99,100,101,102,105,107,111,114,115,116,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,160,166,174,175,176,177,178,179,180,181,182,183,184,185,188,197,201,209,212,214,218,219,228,235,248,250,255,259,],[-91,36,36,36,-92,36,-39,56,-43,-45,-58,92,-68,-71,-76,-98,-99,-100,-90,-93,36,36,36,36,117,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-81,-83,-84,-79,36,36,36,36,36,36,36,36,36,36,-77,-78,-80,-82,-85,-86,-27,36,-101,-41,-42,-33,-46,-47,-26,-48,-49,-28,-50,-25,-51,-52,-53,-54,-55,-56,-57,-17,-18,-59,-23,-60,-61,-24,-62,92,92,92,92,-36,-35,-69,-70,-16,-72,-73,-74,-75,-94,187,-97,36,-34,36,-19,-21,-20,-22,-38,-37,-95,36,36,36,-96,36,36,36,36,-44,-14,-15,36,36,36,36,36,36,]),'GreaterThan':([10,18,27,32,33,34,37,38,43,44,45,46,47,56,78,80,82,83,89,97,98,99,100,101,102,111,117,119,120,122,123,125,127,128,129,130,131,132,133,136,138,139,141,142,143,144,145,146,148,149,151,152,153,154,155,160,182,188,],[-91,-92,76,89,-63,-68,-71,-76,-98,-99,-100,-90,-93,116,-81,-83,-84,-79,146,-77,-78,-80,-82,-85,-86,-101,174,76,76,76,76,76,76,76,76,76,76,76,76,89,89,89,89,-64,-65,-66,-67,180,-69,-70,-72,-73,-74,-75,-94,-97,-95,-96,]),'LessThan':([10,18,25,26,27,32,33,34,37,38,43,44,45,46,47,78,80,82,83,90,97,98,99,100,101,102,111,119,120,122,123,125,127,128,129,130,131,132,133,136,138,139,141,142,143,144,145,147,148,149,151,152,153,154,155,160,182,188,214,243,],[-91,-92,57,-43,74,90,-63,-68,-71,-76,-98,-99,-100,-90,-93,-81,-83,-84,-79,147,-77,-78,-80,-82,-85,-86,-101,74,74,74,74,74,74,74,74,74,74,74,74,90,90,90,90,-64,-65,-66,-67,181,-69,-70,-72,-73,-74,-75,-94,-97,-95,-96,-44,259,]),'Question':([10,18,26,27,32,33,34,37,38,43,44,45,46,47,78,80,82,83,97,98,99,100,101,102,111,119,120,122,123,125,127,128,129,130,131,132,133,134,135,136,138,139,141,142,143,144,145,148,149,151,152,153,154,155,160,182,188,],[-91,-92,58,-45,-58,-63,-68,-71,-76,-98,-99,-100,-90,-93,-81,-83,-84,-79,-77,-78,-80,-82,-85,-86,-101,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,177,179,-59,-60,-61,-62,-64,-65,-66,-67,-69,-70,-72,-73,-74,-75,-94,-97,-95,-96,]),'Bar':([10,14,15,16,18,19,26,27,32,33,34,37,38,42,43,44,45,46,47,50,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,76,77,78,80,82,83,85,86,87,88,91,92,93,94,95,96,97,98,99,100,101,102,105,107,111,116,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,160,166,174,175,176,177,178,179,180,181,182,183,184,185,188,197,201,209,212,218,219,228,235,248,250,255,259,],[-91,28,28,28,-92,28,61,-45,-58,-63,-68,-71,-76,104,-98,-99,-100,-90,-93,28,28,28,28,28,28,28,121,28,28,28,28,28,28,28,28,28,28,28,28,28,-81,-83,-84,-79,28,28,28,28,28,28,28,28,28,28,-77,-78,-80,-82,-85,-86,-27,28,-101,-33,-46,-47,-26,-48,-49,104,-50,-25,-51,-52,-53,-54,-55,-56,-57,-17,-18,-59,-23,-60,-61,-24,-62,-64,-65,-66,-67,-36,-35,-69,-70,-16,-72,-73,-74,-75,-94,-97,28,-34,28,-19,-21,-20,-22,-38,-37,-95,28,28,28,-96,28,28,28,28,-14,-15,28,28,28,28,28,28,]),'Carat':([10,14,15,16,18,19,26,27,32,33,34,37,38,42,43,44,45,46,47,50,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,71,74,75,76,77,78,80,82,83,85,86,87,88,91,92,93,94,95,96,97,98,99,100,101,102,105,107,111,116,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,160,166,174,175,176,177,178,179,180,181,182,183,184,185,188,197,201,209,212,218,219,228,235,248,250,255,259,],[-91,29,29,29,-92,29,62,-45,-58,-63,-68,-71,-76,105,-98,-99,-100,-90,-93,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,105,29,29,29,29,-81,-83,-84,-79,29,29,29,29,29,29,29,29,29,29,-77,-78,-80,-82,-85,-86,-27,29,-101,-33,-46,-47,-26,-48,-49,105,-50,-25,-51,-52,-53,-54,-55,-56,-57,-17,-18,-59,-23,-60,-61,-24,-62,-64,-65,-66,-67,-36,-35,-69,-70,-16,-72,-73,-74,-75,-94,-97,29,-34,29,-19,-21,-20,-22,-38,-37,-95,29,29,29,-96,29,29,29,29,-14,-15,29,29,29,29,29,29,]),'Amp':([10,14,15,16,18,19,26,27,32,33,34,37,38,42,43,44,45,46,47,50,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,76,77,78,80,82,83,85,86,87,88,91,92,93,94,95,96,97,98,99,100,101,102,105,107,111,116,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,160,166,174,175,176,177,178,179,180,181,182,183,184,185,188,197,201,209,212,218,219,228,235,248,250,255,259,],[-91,31,31,31,-92,31,64,-45,-58,-63,-68,-71,-76,103,-98,-99,-100,-90,-93,31,31,31,31,31,31,31,31,31,31,126,31,31,31,31,31,31,31,31,31,31,-81,-83,-84,-79,31,31,31,31,31,31,31,31,31,31,-77,-78,-80,-82,-85,-86,-27,31,-101,-33,-46,-47,-26,-48,-49,103,-50,-25,-51,-52,-53,-54,-55,-56,-57,-17,-18,-59,-23,-60,-61,-24,-62,-64,-65,-66,-67,-36,-35,-69,-70,-16,-72,-73,-74,-75,-94,-97,31,-34,31,-19,-21,-20,-22,-38,-37,-95,31,31,31,-96,31,31,31,31,-14,-15,31,31,31,31,31,31,]),'Tilde':([10,14,15,16,18,19,26,27,28,29,31,32,33,34,37,38,43,44,45,46,47,50,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,76,77,78,80,82,83,85,86,87,88,91,92,93,94,95,96,97,98,99,100,101,102,105,107,111,116,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,160,166,174,175,176,177,178,179,180,181,182,183,184,185,188,197,201,209,212,218,219,228,235,248,250,255,259,],[-91,42,42,42,-92,42,71,-45,79,81,84,-58,-63,-68,-71,-76,-98,-99,-100,-90,-93,42,42,42,42,42,42,42,42,124,42,42,42,42,42,42,42,42,42,42,42,42,-81,-83,-84,-79,42,42,42,42,42,42,42,42,42,42,-77,-78,-80,-82,-85,-86,-27,42,-101,-33,-46,-47,79,-48,-49,-28,-50,84,-51,-52,-53,-54,-55,-56,-57,-17,-18,-59,-23,-60,-61,-24,-62,-64,-65,-66,-67,-36,-35,-69,-70,-16,-72,-73,-74,-75,-94,-97,42,-34,42,-19,-21,-20,-22,-38,-37,-95,42,42,42,-96,42,42,42,42,-14,-15,42,42,42,42,42,42,]),'Equals':([10,18,26,27,32,33,34,37,38,43,44,45,46,47,72,73,74,76,78,80,82,83,97,98,99,100,101,102,111,119,120,122,123,125,127,128,129,130,131,132,133,134,135,136,138,139,141,142,143,144,145,148,149,151,152,153,154,155,160,182,188,],[-91,-92,72,-45,-58,-63,-68,-71,-76,-98,-99,-100,-90,-93,134,135,137,140,-81,-83,-84,-79,-77,-78,-80,-82,-85,-86,-101,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,176,178,-59,-60,-61,-62,-64,-65,-66,-67,-69,-70,-72,-73,-74,-75,-94,-97,-95,-96,]),'Not':([10,14,15,16,18,19,26,27,32,33,34,37,38,43,44,45,46,47,50,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,76,77,78,80,82,83,85,86,87,88,91,92,93,94,95,96,97,98,99,100,101,102,105,107,111,116,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,160,166,174,175,176,177,178,179,180,181,182,183,184,185,188,197,201,209,212,218,219,228,235,248,250,255,259,],[-91,41,41,41,-92,41,73,-45,-58,-63,-68,-71,-76,-98,-99,-100,-90,-93,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-81,-83,-84,-79,41,41,41,41,41,41,41,41,41,41,-77,-78,-80,-82,-85,-86,-27,41,-101,-33,-46,-47,-26,-48,-49,-28,-50,-25,-51,-52,-53,-54,-55,-56,-57,-17,-18,-59,-23,-60,-61,-24,-62,-64,-65,-66,-67,-36,-35,-69,-70,-16,-72,-73,-74,-75,-94,-97,41,-34,41,-19,-21,-20,-22,-38,-37,-95,41,41,41,-96,41,41,41,41,-14,-15,41,41,41,41,41,41,]),'Comma':([10,18,23,24,25,26,27,32,33,34,37,38,43,44,45,46,47,78,80,82,83,97,98,99,100,101,102,111,114,115,119,120,122,123,125,127,128,129,130,131,132,133,136,138,139,141,142,143,144,145,148,149,151,152,153,154,155,160,182,188,208,210,214,241,242,267,268,],[-91,-92,53,-39,-40,-43,-45,-58,-63,-68,-71,-76,-98,-99,-100,-90,-93,-81,-83,-84,-79,-77,-78,-80,-82,-85,-86,-101,-41,-42,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-59,-60,-61,-62,-64,-65,-66,-67,-69,-70,-72,-73,-74,-75,-94,-97,-95,-96,237,-92,-44,258,-110,-111,-109,]),'ParenR':([10,14,15,16,18,20,21,22,23,24,25,26,27,32,33,34,37,38,43,44,45,46,47,48,49,50,51,78,80,82,83,97,98,99,100,101,102,110,111,113,114,115,119,120,122,123,125,127,128,129,130,131,132,133,136,138,139,141,142,143,144,145,148,149,151,152,153,154,155,160,182,188,201,214,233,240,241,242,246,250,262,267,268,],[-91,-1,-1,-1,-92,52,-4,-5,-2,-39,-40,-43,-45,-58,-63,-68,-71,-76,-98,-99,-100,-90,-93,108,109,-1,111,-81,-83,-84,-79,-77,-78,-80,-82,-85,-86,160,-101,-3,-41,-42,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-59,-60,-61,-62,-64,-65,-66,-67,-69,-70,-72,-73,-74,-75,-94,-97,-95,-96,-1,-44,251,256,257,-110,260,-1,271,-111,-109,]),'Colon':([10,18,24,25,26,27,32,33,34,37,38,43,44,45,46,47,78,80,82,83,97,98,99,100,101,102,111,114,115,118,119,120,122,123,125,127,128,129,130,131,132,133,136,138,139,141,142,143,144,145,148,149,151,152,153,154,155,156,160,182,186,187,188,205,214,230,238,],[-91,-92,-39,-40,-43,-45,-58,-63,-68,-71,-76,-98,-99,-100,-90,-93,-81,-83,-84,-79,-77,-78,-80,-82,-85,-86,-101,-41,-42,175,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-59,-60,-61,-62,-64,-65,-66,-67,-69,-70,-72,-73,-74,-75,-94,183,-97,-95,218,219,-96,235,-44,248,255,]),'BracketR':([10,18,24,25,26,27,32,33,34,37,38,43,44,45,46,47,78,80,82,83,97,98,99,100,101,102,111,114,115,119,120,122,123,125,127,128,129,130,131,132,133,136,138,139,141,142,143,144,145,148,149,151,152,153,154,155,156,157,160,182,188,214,215,216,217,238,264,],[-91,-92,-39,-40,-43,-45,-58,-63,-68,-71,-76,-98,-99,-100,-90,-93,-81,-83,-84,-79,-77,-78,-80,-82,-85,-86,-101,-41,-42,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-59,-60,-61,-62,-64,-65,-66,-67,-69,-70,-72,-73,-74,-75,-94,182,188,-97,-95,-96,-44,-87,-88,-89,254,272,]),'KW_this':([10,14,15,16,19,28,29,30,31,35,36,39,40,41,42,50,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,76,77,79,81,84,85,86,87,88,91,92,93,94,95,96,103,104,105,107,116,121,124,126,134,135,137,140,146,147,150,161,166,168,172,173,174,175,176,177,178,179,180,181,183,184,185,197,199,201,207,209,212,218,219,228,235,237,248,250,251,254,255,259,272,],[-91,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-32,-28,-30,47,47,47,47,47,47,47,47,47,47,-29,-31,-27,47,-33,47,47,47,-17,-18,-23,-24,-36,-35,-16,-104,47,47,-107,-102,-34,47,-19,-21,-20,-22,-38,-37,47,47,47,47,47,47,-108,47,47,-14,-15,47,47,47,47,47,-103,-105,47,47,-106,]),'Num':([14,15,16,19,28,29,30,31,35,36,39,40,41,42,50,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,76,77,79,81,84,85,86,87,88,91,92,93,94,95,96,103,104,105,107,116,121,124,126,134,135,137,140,146,147,150,166,174,175,176,177,178,179,180,181,183,184,185,197,201,209,212,218,219,228,235,248,250,255,259,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-32,-28,-30,46,46,46,46,46,46,46,46,46,46,-29,-31,-27,46,-33,46,46,46,-17,-18,-23,-24,-36,-35,-16,46,-34,46,-19,-21,-20,-22,-38,-37,46,46,46,46,46,46,46,-14,-15,46,46,46,46,46,46,]),'KW_endspec':([112,162,163,164,165,203,234,236,239,263,265,266,],[-1,202,-10,-11,-8,-9,-112,-114,-115,-113,-116,-117,]),'KW_def':([112,158,159,165,169,191,192,193,194,195,223,224,225,226,234,236,239,244,245,247,249,256,257,260,263,265,266,269,270,274,],[166,166,197,166,166,197,166,166,166,197,-118,-119,166,-120,-112,-114,-115,-121,-122,-124,-126,166,166,197,-113,-116,-117,-123,-125,-127,]),'KW_invariant':([112,158,159,165,169,191,192,193,194,195,223,224,225,226,234,236,239,244,245,247,249,256,257,260,263,265,266,269,270,274,],[167,167,198,167,167,198,167,167,167,198,-118,-119,167,-120,-112,-114,-115,-121,-122,-124,-126,167,167,198,-113,-116,-117,-123,-125,-127,]),'KW_begin':([112,158,159,165,169,191,192,193,194,195,223,224,225,226,234,236,239,244,245,247,249,256,257,260,263,265,266,269,270,274,],[169,169,195,169,169,195,169,169,169,195,-118,-119,169,-120,-112,-114,-115,-121,-122,-124,-126,169,169,195,-113,-116,-117,-123,-125,-127,]),'KW_if':([112,158,159,165,169,191,192,193,194,195,223,224,225,226,234,236,239,244,245,247,249,256,257,260,263,265,266,269,270,274,],[170,170,196,170,170,196,170,170,170,196,-118,-119,170,-120,-112,-114,-115,-121,-122,-124,-126,170,170,196,-113,-116,-117,-123,-125,-127,]),'KW_foreach':([112,158,165,169,192,193,194,225,234,236,239,256,257,263,265,266,],[171,171,171,171,171,171,171,171,-112,-114,-115,171,171,-113,-116,-117,]),'KW_logic':([112,158,159,165,169,191,192,193,194,195,223,224,225,226,234,236,239,244,245,247,249,256,257,260,263,265,266,269,270,274,],[173,173,173,173,173,173,173,173,173,173,-118,-119,173,-120,-112,-114,-115,-121,-122,-124,-126,173,173,173,-113,-116,-117,-123,-125,-127,]),'KW_endstruct':([158,163,164,165,189,203,234,236,239,263,265,266,],[-1,-10,-11,-8,220,-9,-112,-114,-115,-113,-116,-117,]),'KW_input':([159,191,195,223,224,226,234,236,239,244,245,247,249,260,263,265,266,269,270,274,],[192,192,192,-118,-119,-120,-112,-114,-115,-121,-122,-124,-126,192,-113,-116,-117,-123,-125,-127,]),'KW_output':([159,191,195,223,224,226,234,236,239,244,245,247,249,260,263,265,266,269,270,274,],[193,193,193,-118,-119,-120,-112,-114,-115,-121,-122,-124,-126,193,-113,-116,-117,-123,-125,-127,]),'KW_state':([159,191,193,195,223,224,226,234,236,239,244,245,247,249,260,263,265,266,269,270,274,],[194,194,225,194,-118,-119,-120,-112,-114,-115,-121,-122,-124,-126,194,-113,-116,-117,-123,-125,-127,]),'KW_submodule':([159,191,195,223,224,226,234,236,239,244,245,247,249,260,263,265,266,269,270,274,],[200,200,200,-118,-119,-120,-112,-114,-115,-121,-122,-124,-126,200,-113,-116,-117,-123,-125,-127,]),'KW_end':([163,164,165,169,191,203,211,222,223,224,226,227,234,236,239,244,245,247,249,263,265,266,269,270,274,],[-10,-11,-8,-1,-12,-9,239,-13,-118,-119,-120,245,-112,-114,-115,-121,-122,-124,-126,-113,-116,-117,-123,-125,-127,]),'KW_endmodule':([190,191,222,223,224,226,234,236,239,244,245,247,249,263,265,266,269,270,274,],[221,-12,-13,-118,-119,-120,-112,-114,-115,-121,-122,-124,-126,-113,-116,-117,-123,-125,-127,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'caliper_declarations':([0,3,],[1,8,]),'empty':([0,3,14,15,16,50,112,158,169,201,250,],[2,2,21,21,21,21,163,163,163,21,21,]),'caliper_declaration':([0,3,],[3,3,]),'identifier':([4,5,6,7,14,15,16,19,28,29,30,31,35,36,39,40,41,42,50,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,76,77,85,86,87,88,91,92,93,94,95,96,106,107,112,121,124,126,158,159,165,166,167,168,169,175,183,184,185,191,192,193,194,195,197,198,199,200,201,209,212,213,225,228,235,237,248,250,255,256,257,258,259,260,271,],[9,11,12,13,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,155,18,161,18,18,18,161,161,161,18,205,210,161,18,18,18,18,161,161,161,161,161,18,230,210,232,18,18,18,243,161,18,18,210,18,18,18,161,161,243,18,161,273,]),'expr_list':([14,15,16,50,201,250,],[20,48,49,110,233,262,]),'expr_list_p':([14,15,16,50,53,166,197,201,250,],[22,22,22,22,113,204,229,22,22,]),'expression':([14,15,16,19,50,53,58,107,166,183,184,185,197,201,209,212,228,235,248,250,255,259,],[23,23,23,51,23,23,118,156,23,215,216,217,23,23,238,240,246,252,261,23,264,268,]),'expression1':([14,15,16,19,50,53,54,55,58,107,166,183,184,185,197,201,209,212,228,235,248,250,255,259,],[24,24,24,24,24,24,114,115,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'expression2':([14,15,16,19,50,53,54,55,58,107,166,175,183,184,185,197,201,209,212,228,235,248,250,255,259,],[25,25,25,25,25,25,25,25,25,25,25,214,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'expression3':([14,15,16,19,50,53,54,55,58,107,166,175,183,184,185,197,201,209,212,228,235,248,250,255,259,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'expression4':([14,15,16,19,50,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,107,166,175,183,184,185,197,201,209,212,228,235,248,250,255,259,],[27,27,27,27,27,27,27,27,27,119,120,122,123,125,127,128,129,130,131,132,133,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'BinaryXnor':([14,15,16,19,26,50,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,76,77,85,86,87,88,91,92,93,94,95,96,107,166,175,183,184,185,197,201,209,212,228,235,248,250,255,259,],[30,30,30,30,63,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'expression5':([14,15,16,19,50,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,76,77,107,166,175,183,184,185,197,201,209,212,228,235,248,250,255,259,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,136,138,139,141,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'expression6':([14,15,16,19,50,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,76,77,85,86,87,88,107,166,175,183,184,185,197,201,209,212,228,235,248,250,255,259,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,142,143,144,145,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'expression7':([14,15,16,19,50,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,76,77,85,86,87,88,91,92,107,166,175,183,184,185,197,201,209,212,228,235,248,250,255,259,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,148,149,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'expression8':([14,15,16,19,50,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,76,77,85,86,87,88,91,92,93,94,95,96,107,166,175,183,184,185,197,201,209,212,228,235,248,250,255,259,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,151,152,153,154,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'primary':([14,15,16,19,28,29,30,31,35,36,39,40,41,42,50,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,76,77,85,86,87,88,91,92,93,94,95,96,107,121,124,126,166,175,183,184,185,197,201,209,212,228,235,248,250,255,259,],[38,38,38,38,78,80,82,83,97,98,99,100,101,102,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,78,102,83,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'BinaryNand':([14,15,16,19,50,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,76,77,85,86,87,88,91,92,93,94,95,96,107,166,175,183,184,185,197,201,209,212,228,235,248,250,255,259,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'BinaryNor':([14,15,16,19,50,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,76,77,85,86,87,88,91,92,93,94,95,96,107,166,175,183,184,185,197,201,209,212,228,235,248,250,255,259,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'number':([14,15,16,19,28,29,30,31,35,36,39,40,41,42,50,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,76,77,85,86,87,88,91,92,93,94,95,96,107,121,124,126,166,175,183,184,185,197,201,209,212,228,235,248,250,255,259,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'primary1':([14,15,16,19,28,29,30,31,35,36,39,40,41,42,50,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,76,77,85,86,87,88,91,92,93,94,95,96,107,121,124,126,166,168,175,183,184,185,197,199,201,209,212,228,235,237,248,250,255,259,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,208,44,44,44,44,44,208,44,44,44,44,44,208,44,44,44,44,]),'function_call':([14,15,16,19,28,29,30,31,35,36,39,40,41,42,50,53,54,55,58,59,60,61,62,63,64,65,66,67,68,69,70,74,75,76,77,85,86,87,88,91,92,93,94,95,96,107,121,124,126,166,175,183,184,185,197,201,209,212,228,235,248,250,255,259,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'LogicalImplication':([25,],[54,]),'LogicalEquivalence':([25,],[55,]),'LogicalOr':([26,],[59,]),'LogicalAnd':([26,],[60,]),'Equality':([26,],[65,]),'Inequality':([26,],[66,]),'CaseEquality':([26,],[67,]),'CaseInequality':([26,],[68,]),'WildcardEquality':([26,],[69,]),'WildcardInequality':([26,],[70,]),'LessThanEqual':([27,119,120,122,123,125,127,128,129,130,131,132,133,],[75,75,75,75,75,75,75,75,75,75,75,75,75,]),'GreaterThanEqual':([27,119,120,122,123,125,127,128,129,130,131,132,133,],[77,77,77,77,77,77,77,77,77,77,77,77,77,]),'LogicalShiftRight':([32,136,138,139,141,],[85,85,85,85,85,]),'LogicalShiftLeft':([32,136,138,139,141,],[86,86,86,86,86,]),'ArithmeticShiftRight':([32,136,138,139,141,],[87,87,87,87,87,]),'ArithmeticShiftLeft':([32,136,138,139,141,],[88,88,88,88,88,]),'Power':([34,148,149,],[96,96,96,]),'part_select_range':([107,],[157,]),'caliper_statement_list':([112,158,169,],[162,189,211,]),'caliper_statement_list_p':([112,158,165,169,],[164,164,203,164,]),'caliper_statement':([112,158,165,169,192,193,194,225,256,257,],[165,165,165,165,223,224,226,244,265,266,]),'datatype':([112,158,159,165,169,191,192,193,194,195,225,256,257,260,],[168,168,199,168,168,199,168,168,168,199,168,168,168,199,]),'basetype':([112,158,159,165,169,191,192,193,194,195,225,256,257,260,],[172,172,172,172,172,172,172,172,172,172,172,172,172,172,]),'PlusColon':([156,],[184,]),'MinusColon':([156,],[185,]),'caliper_mod_stmt_list':([159,191,195,],[190,222,227,]),'caliper_mod_stmt':([159,191,195,260,],[191,191,191,269,]),'primary1_list_p':([168,199,237,],[206,231,253,]),'dimension':([168,199,],[207,207,]),'caliper_loop_list_p':([213,],[241,]),'caliper_loop':([213,258,],[242,267,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> caliper_declarations","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','pycparse.py',25),
  ('expr_list_p -> expression','expr_list_p',1,'p_expr_list_p_1','pycparse.py',30),
  ('expr_list_p -> expression Comma expr_list_p','expr_list_p',3,'p_expr_list_p_2','pycparse.py',35),
  ('expr_list -> empty','expr_list',1,'p_expr_list_1','pycparse.py',40),
  ('expr_list -> expr_list_p','expr_list',1,'p_expr_list_2','pycparse.py',45),
  ('primary1_list_p -> primary1','primary1_list_p',1,'p_primary1_list_p_1','pycparse.py',50),
  ('primary1_list_p -> primary1 Comma primary1_list_p','primary1_list_p',3,'p_primary1_list_p_2','pycparse.py',55),
  ('caliper_statement_list_p -> caliper_statement','caliper_statement_list_p',1,'p_caliper_statement_list_p_1','pycparse.py',60),
  ('caliper_statement_list_p -> caliper_statement caliper_statement_list_p','caliper_statement_list_p',2,'p_caliper_statement_list_p_2','pycparse.py',65),
  ('caliper_statement_list -> empty','caliper_statement_list',1,'p_caliper_statement_list_1','pycparse.py',70),
  ('caliper_statement_list -> caliper_statement_list_p','caliper_statement_list',1,'p_caliper_statement_list_2','pycparse.py',75),
  ('caliper_mod_stmt_list -> caliper_mod_stmt','caliper_mod_stmt_list',1,'p_caliper_mod_stmt_list_1','pycparse.py',80),
  ('caliper_mod_stmt_list -> caliper_mod_stmt caliper_mod_stmt_list','caliper_mod_stmt_list',2,'p_caliper_mod_stmt_list_2','pycparse.py',85),
  ('PlusColon -> Plus Colon','PlusColon',2,'p_PlusColon','pycparse.py',93),
  ('MinusColon -> Minus Colon','MinusColon',2,'p_MinusColon','pycparse.py',98),
  ('Power -> Star Star','Power',2,'p_Power','pycparse.py',103),
  ('Equality -> Equals Equals','Equality',2,'p_Equality','pycparse.py',108),
  ('Inequality -> Not Equals','Inequality',2,'p_Inequality','pycparse.py',113),
  ('CaseEquality -> Equals Equals Equals','CaseEquality',3,'p_CaseEquality','pycparse.py',118),
  ('CaseInequality -> Not Equals Equals','CaseInequality',3,'p_CaseInequality','pycparse.py',123),
  ('WildcardEquality -> Equals Equals Question','WildcardEquality',3,'p_WildcardEquality','pycparse.py',128),
  ('WildcardInequality -> Not Equals Question','WildcardInequality',3,'p_WildcardInequality','pycparse.py',133),
  ('LessThanEqual -> LessThan Equals','LessThanEqual',2,'p_LessThanEqual','pycparse.py',140),
  ('GreaterThanEqual -> GreaterThan Equals','GreaterThanEqual',2,'p_GreaterThanEqual','pycparse.py',147),
  ('LogicalAnd -> Amp Amp','LogicalAnd',2,'p_LogicalAnd','pycparse.py',152),
  ('LogicalOr -> Bar Bar','LogicalOr',2,'p_LogicalOr','pycparse.py',157),
  ('BinaryXnor -> Tilde Carat','BinaryXnor',2,'p_BinaryXnor','pycparse.py',163),
  ('BinaryXnor -> Carat Tilde','BinaryXnor',2,'p_BinaryXnor','pycparse.py',164),
  ('BinaryNand -> Tilde Amp','BinaryNand',2,'p_BinaryNand','pycparse.py',171),
  ('BinaryNand -> Amp Tilde','BinaryNand',2,'p_BinaryNand','pycparse.py',172),
  ('BinaryNor -> Tilde Bar','BinaryNor',2,'p_BinaryNor','pycparse.py',179),
  ('BinaryNor -> Bar Tilde','BinaryNor',2,'p_BinaryNor','pycparse.py',180),
  ('LogicalImplication -> Minus GreaterThan','LogicalImplication',2,'p_LogicalImplication','pycparse.py',186),
  ('LogicalEquivalence -> LessThan Minus GreaterThan','LogicalEquivalence',3,'p_LogicalEquivalence','pycparse.py',191),
  ('LogicalShiftLeft -> LessThan LessThan','LogicalShiftLeft',2,'p_LogicalShiftLeft','pycparse.py',196),
  ('LogicalShiftRight -> GreaterThan GreaterThan','LogicalShiftRight',2,'p_LogicalShiftRight','pycparse.py',201),
  ('ArithmeticShiftLeft -> LessThan LessThan LessThan','ArithmeticShiftLeft',3,'p_ArithmeticShiftLeft','pycparse.py',206),
  ('ArithmeticShiftRight -> GreaterThan GreaterThan GreaterThan','ArithmeticShiftRight',3,'p_ArithmeticShiftRight','pycparse.py',211),
  ('expression -> expression1','expression',1,'p_expression','pycparse.py',216),
  ('expression1 -> expression2','expression1',1,'p_expression1_1','pycparse.py',227),
  ('expression1 -> expression2 LogicalImplication expression1','expression1',3,'p_expression1_2','pycparse.py',234),
  ('expression1 -> expression2 LogicalEquivalence expression1','expression1',3,'p_expression1_2','pycparse.py',235),
  ('expression2 -> expression3','expression2',1,'p_expression2_1','pycparse.py',247),
  ('expression2 -> expression3 Question expression Colon expression2','expression2',5,'p_expression2_2','pycparse.py',254),
  ('expression3 -> expression4','expression3',1,'p_expression3_1','pycparse.py',261),
  ('expression3 -> expression3 LogicalOr expression4','expression3',3,'p_expression3_2','pycparse.py',268),
  ('expression3 -> expression3 LogicalAnd expression4','expression3',3,'p_expression3_2','pycparse.py',269),
  ('expression3 -> expression3 Bar expression4','expression3',3,'p_expression3_2','pycparse.py',270),
  ('expression3 -> expression3 Carat expression4','expression3',3,'p_expression3_2','pycparse.py',271),
  ('expression3 -> expression3 BinaryXnor expression4','expression3',3,'p_expression3_2','pycparse.py',272),
  ('expression3 -> expression3 Amp expression4','expression3',3,'p_expression3_2','pycparse.py',273),
  ('expression3 -> expression3 Equality expression4','expression3',3,'p_expression3_2','pycparse.py',274),
  ('expression3 -> expression3 Inequality expression4','expression3',3,'p_expression3_2','pycparse.py',275),
  ('expression3 -> expression3 CaseEquality expression4','expression3',3,'p_expression3_2','pycparse.py',276),
  ('expression3 -> expression3 CaseInequality expression4','expression3',3,'p_expression3_2','pycparse.py',277),
  ('expression3 -> expression3 WildcardEquality expression4','expression3',3,'p_expression3_2','pycparse.py',278),
  ('expression3 -> expression3 WildcardInequality expression4','expression3',3,'p_expression3_2','pycparse.py',279),
  ('expression4 -> expression5','expression4',1,'p_expression4_1','pycparse.py',313),
  ('expression4 -> expression4 LessThan expression5','expression4',3,'p_expression4_2','pycparse.py',320),
  ('expression4 -> expression4 LessThanEqual expression5','expression4',3,'p_expression4_2','pycparse.py',321),
  ('expression4 -> expression4 GreaterThan expression5','expression4',3,'p_expression4_2','pycparse.py',322),
  ('expression4 -> expression4 GreaterThanEqual expression5','expression4',3,'p_expression4_2','pycparse.py',323),
  ('expression5 -> expression6','expression5',1,'p_expression5_1','pycparse.py',346),
  ('expression5 -> expression5 LogicalShiftRight expression6','expression5',3,'p_expression5_2','pycparse.py',353),
  ('expression5 -> expression5 LogicalShiftLeft expression6','expression5',3,'p_expression5_2','pycparse.py',354),
  ('expression5 -> expression5 ArithmeticShiftRight expression6','expression5',3,'p_expression5_2','pycparse.py',355),
  ('expression5 -> expression5 ArithmeticShiftLeft expression6','expression5',3,'p_expression5_2','pycparse.py',356),
  ('expression6 -> expression7','expression6',1,'p_expression6_1','pycparse.py',372),
  ('expression6 -> expression6 Plus expression7','expression6',3,'p_expression6_2','pycparse.py',379),
  ('expression6 -> expression6 Minus expression7','expression6',3,'p_expression6_2','pycparse.py',380),
  ('expression7 -> expression8','expression7',1,'p_expression7_1','pycparse.py',392),
  ('expression7 -> expression7 Star expression8','expression7',3,'p_expression7_2','pycparse.py',399),
  ('expression7 -> expression7 Divide expression8','expression7',3,'p_expression7_2','pycparse.py',400),
  ('expression7 -> expression7 Mod expression8','expression7',3,'p_expression7_2','pycparse.py',401),
  ('expression7 -> expression7 Power expression8','expression7',3,'p_expression7_2','pycparse.py',402),
  ('expression8 -> primary','expression8',1,'p_expression8_1','pycparse.py',418),
  ('expression8 -> Plus primary','expression8',2,'p_expression8_2','pycparse.py',425),
  ('expression8 -> Minus primary','expression8',2,'p_expression8_2','pycparse.py',426),
  ('expression8 -> Amp primary','expression8',2,'p_expression8_2','pycparse.py',427),
  ('expression8 -> BinaryNand primary','expression8',2,'p_expression8_2','pycparse.py',428),
  ('expression8 -> Bar primary','expression8',2,'p_expression8_2','pycparse.py',429),
  ('expression8 -> BinaryNor primary','expression8',2,'p_expression8_2','pycparse.py',430),
  ('expression8 -> Carat primary','expression8',2,'p_expression8_2','pycparse.py',431),
  ('expression8 -> BinaryXnor primary','expression8',2,'p_expression8_2','pycparse.py',432),
  ('expression8 -> Not primary','expression8',2,'p_expression8_2','pycparse.py',433),
  ('expression8 -> Tilde primary','expression8',2,'p_expression8_2','pycparse.py',434),
  ('part_select_range -> expression Colon expression','part_select_range',3,'p_constant_range','pycparse.py',463),
  ('part_select_range -> expression PlusColon expression','part_select_range',3,'p_constant_range','pycparse.py',464),
  ('part_select_range -> expression MinusColon expression','part_select_range',3,'p_constant_range','pycparse.py',465),
  ('number -> Num','number',1,'p_number','pycparse.py',477),
  ('identifier -> Ident','identifier',1,'p_identifier','pycparse.py',494),
  ('primary1 -> identifier','primary1',1,'p_primary1_1','pycparse.py',513),
  ('primary1 -> KW_this','primary1',1,'p_primary1_2','pycparse.py',520),
  ('primary1 -> primary1 Dot identifier','primary1',3,'p_primary1_3','pycparse.py',527),
  ('primary1 -> primary1 BracketL expression BracketR','primary1',4,'p_primary1_4','pycparse.py',539),
  ('primary1 -> primary1 BracketL part_select_range BracketR','primary1',4,'p_primary1_5','pycparse.py',561),
  ('function_call -> identifier ParenL expr_list ParenR','function_call',4,'p_function_call','pycparse.py',580),
  ('primary -> number','primary',1,'p_primary','pycparse.py',607),
  ('primary -> primary1','primary',1,'p_primary','pycparse.py',608),
  ('primary -> function_call','primary',1,'p_primary','pycparse.py',609),
  ('primary -> ParenL expression ParenR','primary',3,'p_primary','pycparse.py',610),
  ('basetype -> KW_logic','basetype',1,'p_basetype_1','pycparse.py',626),
  ('basetype -> identifier ParenL expr_list ParenR','basetype',4,'p_basetype_2','pycparse.py',633),
  ('basetype -> identifier','basetype',1,'p_basetype_3','pycparse.py',642),
  ('dimension -> BracketL expression BracketR','dimension',3,'p_dimension_1','pycparse.py',656),
  ('dimension -> BracketL expression Colon expression BracketR','dimension',5,'p_dimension_2','pycparse.py',663),
  ('datatype -> basetype','datatype',1,'p_datatype_1','pycparse.py',673),
  ('datatype -> datatype dimension','datatype',2,'p_datatype_2','pycparse.py',678),
  ('caliper_loop -> identifier LessThan expression','caliper_loop',3,'p_caliper_loop_1','pycparse.py',702),
  ('caliper_loop_list_p -> caliper_loop','caliper_loop_list_p',1,'p_caliper_loop_list_p_1','pycparse.py',713),
  ('caliper_loop_list_p -> caliper_loop_list_p Comma caliper_loop','caliper_loop_list_p',3,'p_caliper_loop_list_p_2','pycparse.py',718),
  ('caliper_statement -> KW_def expr_list_p Semi','caliper_statement',3,'p_caliper_statement_1','pycparse.py',724),
  ('caliper_statement -> KW_invariant identifier Colon expression Semi','caliper_statement',5,'p_caliper_statement_2','pycparse.py',731),
  ('caliper_statement -> datatype primary1_list_p Semi','caliper_statement',3,'p_caliper_statement_3','pycparse.py',738),
  ('caliper_statement -> KW_begin caliper_statement_list KW_end','caliper_statement',3,'p_caliper_statement_4','pycparse.py',750),
  ('caliper_statement -> KW_if ParenL expression ParenR caliper_statement','caliper_statement',5,'p_caliper_statement_5','pycparse.py',757),
  ('caliper_statement -> KW_foreach ParenL caliper_loop_list_p ParenR caliper_statement','caliper_statement',5,'p_caliper_statement_6','pycparse.py',769),
  ('caliper_mod_stmt -> KW_input caliper_statement','caliper_mod_stmt',2,'p_caliper_mod_stmt_1','pycparse.py',802),
  ('caliper_mod_stmt -> KW_output caliper_statement','caliper_mod_stmt',2,'p_caliper_mod_stmt_2','pycparse.py',809),
  ('caliper_mod_stmt -> KW_state caliper_statement','caliper_mod_stmt',2,'p_caliper_mod_stmt_3','pycparse.py',816),
  ('caliper_mod_stmt -> KW_output KW_state caliper_statement','caliper_mod_stmt',3,'p_caliper_mod_stmt_4','pycparse.py',823),
  ('caliper_mod_stmt -> KW_begin caliper_mod_stmt_list KW_end','caliper_mod_stmt',3,'p_caliper_mod_stmt_5','pycparse.py',830),
  ('caliper_mod_stmt -> KW_if ParenL expression ParenR caliper_mod_stmt','caliper_mod_stmt',5,'p_caliper_mod_stmt_6','pycparse.py',837),
  ('caliper_mod_stmt -> KW_def expr_list_p Semi','caliper_mod_stmt',3,'p_caliper_mod_stmt_7','pycparse.py',844),
  ('caliper_mod_stmt -> KW_invariant identifier Colon expression Semi','caliper_mod_stmt',5,'p_caliper_mod_stmt_8','pycparse.py',852),
  ('caliper_mod_stmt -> datatype primary1_list_p Semi','caliper_mod_stmt',3,'p_caliper_mod_stmt_9','pycparse.py',859),
  ('caliper_mod_stmt -> KW_submodule identifier ParenL expr_list ParenR identifier Semi','caliper_mod_stmt',7,'p_caliper_mod_stmt_10','pycparse.py',872),
  ('caliper_declaration -> KW_spec identifier ParenL expr_list ParenR Semi caliper_statement_list KW_endspec','caliper_declaration',8,'p_caliper_declaration_1','pycparse.py',895),
  ('caliper_declaration -> KW_struct identifier ParenL expr_list ParenR Semi caliper_statement_list KW_endstruct','caliper_declaration',8,'p_caliper_declaration_2','pycparse.py',906),
  ('caliper_declaration -> KW_module identifier ParenL expr_list ParenR Semi caliper_mod_stmt_list KW_endmodule','caliper_declaration',8,'p_caliper_declaration_3','pycparse.py',917),
  ('caliper_declaration -> KW_parameter identifier Semi','caliper_declaration',3,'p_caliper_declaration_4','pycparse.py',928),
  ('caliper_declarations -> empty','caliper_declarations',1,'p_caliper_declarations_1','pycparse.py',939),
  ('caliper_declarations -> caliper_declaration caliper_declarations','caliper_declarations',2,'p_caliper_declarations_2','pycparse.py',946),
]
